local busted = require 'busted'

busted.describe('seamstress.async',
  function()
    busted.it('is callable', function()
      busted.assert.has('__call', seamstress.async)
    end)
    busted.it('returns a function', function()
      busted.assert.is_function(seamstress.async(function() end))
    end)
    busted.it('the returned function returns a Promise', function()
      local b = seamstress.async(function() end)()
      busted.assert.is_userdata(b)
      busted.assert.is(b.__name, 'seamstress.async.Promise')
    end)
  end)

busted.describe('seamstress.async.Promise', function()
  busted.it('is a function', function()
    busted.assert.is_function(seamstress.async.Promise)
  end)
  busted.it('returns a Promise', function()
    local b = seamstress.async.Promise(function() end)
    busted.assert.is_userdata(b)
    busted.assert.is(b.__name, 'seamstress.async.Promise')
  end)
  busted.it('can be awaited', function()
    local b = seamstress.async.Promise(function() end)
    busted.assert.has_no_error(b.await, b)
  end)
  busted.it('awaiting a promise pulls out its value', function()
    local b = seamstress.async.Promise(function()
      return 2
    end)
    busted.assert(2 == b:await())
  end)
  busted.it('Promises can be chained with anon', function()
    local b = seamstress.async.Promise(function()
      return 2
    end)
    busted.assert(4 == b:anon(function(x) return x + 2 end):await())
  end)
  busted.it('tests can await', function()
    local promise = seamstress.async(function()
      busted.assert.falsy(false)
    end)()
    busted.assert.has_no_error(promise.await, promise)
  end)
end)
